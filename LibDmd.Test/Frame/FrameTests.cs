using FluentAssertions;
using LibDmd.Converter.Vni;
using LibDmd.Frame;
using NUnit.Framework;
// ReSharper disable EqualExpressionComparison

namespace LibDmd.Test
{
	[TestFixture]
	public class FrameTests : TestBase
	{
	
		[SetUp]
		public void Setup()
		{
		}

		[TestCase]
		public void Should_Correctly_Determine_BitLength()
		{
			4.GetBitLength().Should().Be(2);
			16.GetBitLength().Should().Be(4);
			64.GetBitLength().Should().Be(6);
		}

		[TestCase]
		public void Should_Correctly_Determine_ByteLength()
		{
			2.GetByteLength().Should().Be(1);
			4.GetByteLength().Should().Be(1);
			6.GetByteLength().Should().Be(1);
			24.GetByteLength().Should().Be(3);
		}

		[TestCase]
		public void Should_Correctly_Determine_FrameSize()
		{
			new DmdFrame(128, 32, 2).Data.Length.Should().Be(4096);
			new DmdFrame(128, 32, 4).Data.Length.Should().Be(4096);
			new DmdFrame(128, 32, 6).Data.Length.Should().Be(4096);
			new DmdFrame(128, 32, 8).Data.Length.Should().Be(4096);
			new DmdFrame(128, 32, 24).Data.Length.Should().Be(4096 * 3);
		}

		[TestCase]
		public void Should_Correctly_Compare_Frames()
		{
			var gray1 = FrameGenerator.Random(128, 32, 4);
			var gray2 = FrameGenerator.Random(128, 32, 4);
			var rgb1 = FrameGenerator.Random(128, 32, 24);
			var rgb2 = FrameGenerator.Random(128, 32, 24);
			
			(gray1 == gray2).Should().Be(false);

			(rgb1 == rgb2).Should().Be(false);

			(rgb1 == gray1).Should().Be(false);

			gray1.Update(gray2);
			(gray1 == gray2).Should().Be(true);
			
			rgb1.Update(gray2);
			(rgb1 == gray2).Should().Be(true);

			// const int num = 1000000;
			// for (var i = 0; i < num; i++) {
			// 	Profiler.Start("Compare1");
			// 	FrameUtil.CompareBuffers1(f1.Data, f1.Data);
			// 	Profiler.Stop("Compare1");
			// 	Profiler.Start("Compare2");
			// 	FrameUtil.CompareBuffers2(f1.Data, f1.Data);
			// 	Profiler.Stop("Compare2");
			// }
			//
			// Profiler.Start("Compare11");
			// for (var i = 0; i < num; i++) {
			// 	FrameUtil.CompareBuffers1(f1.Data, f1.Data);
			// }
			// Profiler.Stop("Compare11");
			//
			// Profiler.Start("Compare22");
			// for (var i = 0; i < num; i++) {
			// 	FrameUtil.CompareBuffers2(f1.Data, f1.Data);
			// }
			// Profiler.Stop("Compare22");
			//
			// AddLogger();
			// Profiler.Print();
			// RemoveLogger();
		}

		//[TestCase]
		public void DebugMMColorization()
		{
			AddLogger();
			var palFile = new PalFile(@"L:\Visual Pinball\VPinMAME\altcolor\mm_109\pin2dmd.pal");
			var vniFile = new VniFile(@"L:\Visual Pinball\VPinMAME\altcolor\mm_109\pin2dmd.vni");
			var colorizer = new VniColorizer(palFile, vniFile);
			colorizer.DumpAnimations(@"C:\Temp\vnidump");

			var srcFrame = FrameGenerator.FromString(@"
01000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000210000000010
00110001112000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021110001100
00011112000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021111000
00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100
00200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200
01000000000000000000000000000000333033300033003000300000003330300300330030003033300333003300300300000000000000000000000000000010
01000000000000000000000000000000030030030300303000300000030000300303003033033030030030030030330300000000000000000000000000000010
02000000000000000000000000000000030033300300303000300000030000333303333030303033300030030030303300000000000000000000000000000020
00100000000000000000000000000000030030030300303000300000030000300303003030003030000030030030300300000000000000000000000000000100
00020000000000000000000000000000030030030033003330333000003330300303003030003030000333003300300300000000000000000000000000002000
00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100
10100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101
00020000000000000000000000000000000000000000330033330033333000000000000000000333300033330000000000000000000000000000000000002000
00011000000000000000000000000000000000000000330333333033333300000000000000003333330333333000000000000000000000000000000000011000
10012000000000000000000000000000000000000000330330033033003300000000000000003300330330033000000000000000000000000000000000021001
00120000000000000000000000000000000000000000330330000033003300000333333000000003330330033000000000000000000000000000000000002100
01100000000000000000000000000000000000000000330330000033003300000333333000000333300330033000000000000000000000000000000000000110
01200012000200200000000000000000000000003300330330033033003300000000000000003330000330033000000000000000000000000200200021000210
01100000202001000300000000000000000000003333330333333033333300000000000000003333330333333000000000000000000000300010020200000110
01012100122332001300000000000000000000000333300033330033333000000000000000003333330033330000000000000000000000310023322100121010
00100011111220201200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000210202211111000100
00001112220223110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001132202221110000
30001100002331022100000000033303330003300300030000333000033300333300333033303330003300300030333303330000000000122013320000110003
13011012120010200010000000003003003030030300030003000000030030300003000003003003030030030300300003003000000001000201002121011031
02201100001202002200000000003003330030030300030000330000030030333000330003003330030030003000333003003000000000220020210000110220
10201120000010030320000000003003003030030300030000003000030030300000003003003003030030003000300003003000000002303001000002110201
20201200303301303301000000003003003003300333033303330000033300333303330003003003003300003000333303330000000010330310330300210202
20211020000000130022100000000000000000000000000000000000000000000000000000000000000000000000000000000000000122003100000002011202
01021200122020203000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000200030202022100212010
02021013320011122022020000000000000000000000000000000000000000000000000000000000000000000000000000000000002022022111002331012020
02021132103100111000220000000000000000000000000000000000000000000000000000000000000000000000000000000000002200011100130123112020
20120121032211000011010000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000011223012102102
");

			colorizer.Convert(srcFrame);
			// var mapping = palFile.Mappings[1474015268];
			// var trollAnim = vniFile.Find(24);
			// trollAnim.SwitchMode = mapping.switchMode;
			// trollAnim.NextFrame(srcFrame.Dimensions, srcFrame.BitPlanes);

			RemoveLogger();
		}
	}
}